name: Publish Release

on:
    workflow_dispatch:
        inputs:
            environment:
                type: environment
                default: "Beta"
            version:
                type: string
                description: "Version (semver) for the release."
                default: "0.0.1"
                required: true
            build:
                type: string
                description: "Build number (int, 3 max digits) for the release."
                default: "0"
                required: true
            vendor_version:
                type: string
                description: "Vendor Version (semver) for the release -- what will be visible."
                default: "0.0.1"
                required: true

jobs:
    update_version:
        name: "Update version"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

        runs-on: ubuntu-latest
        outputs:
            new_commit_sha: ${{ steps.commit_and_push.outputs.new_commit_sha }}

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Update version in packages
              run: |
                  npm run update-version ${{ env.RELEASE_VERSION }}
            - name: Commit and push
              id: commit_and_push
              run: |
                  git commit -am "Release v${{ env.RELEASE_VERSION }}"
                  git push origin
                  echo "::set-output name=new_commit_sha::$(git rev-parse HEAD)"

    create_release_tag:
        name: "Create release tag"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        needs: update_version
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}
            PL_VENDOR_BASE_URL: "https://github.com/${{ github.repository }}"

        runs-on: ubuntu-latest
        outputs:
            release_id: ${{ steps.create_release.outputs.id }}
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: "${{ env.LATEST_SHA }}"
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Build tauri-update.json
              run: cd packages/tauri && node generate-tauri-update-file.js
            - uses: rickstaa/action-create-tag@v1
              with:
                  tag: "v${{ env.RELEASE_VERSION }}"
                  message: "v${{ env.RELEASE_VERSION }}"
            - uses: softprops/action-gh-release@v1
              id: create_release
              name: Create release and add tauri-update.json
              with:
                  tag_name: "v${{ env.RELEASE_VERSION }}"
                  name: "Padloc v${{ env.RELEASE_VERSION }}"
                  body: "Padloc v${{ env.RELEASE_VERSION }}"
                  prerelease: true
                  draft: true
                  files: packages/tauri/tauri-update.json
                  fail_on_unmatched_files: true

    # NOTE: Skipped for now
    # publish_npm:
    #     name: "Publish packages to npm"
    #     environment: ${{ github.event.inputs.environment || 'Beta' }}
    #     needs: [update_version, create_release_tag]
    #     env:
    #         RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
    #         LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
    #         NPM_TOKEN: ${{ secrets.PL_NPM_TOKEN }}
    #         PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2
    #           with:
    #               ref: "${{ env.LATEST_SHA }}"
    #         - uses: actions/setup-node@v2
    #           with:
    #               node-version-file: ".nvmrc"
    #         - name: Install dependencies
    #           run: |
    #               npm i -g npm@8.2.0
    #               npm ci
    #         - name: Publish to npm
    #           run: |
    #               npm run publish -- --yes

    release_web_extension:
        name: "Release web extension"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        needs: [update_version, create_release_tag]
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            RELEASE_BUILD: ${{ github.event.inputs.build || '0' }}
            LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: "${{ env.LATEST_SHA }}"
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0 web-ext@6.6.0
                  npm ci
            - name: Build
              env:
                  PL_SERVER_URL: ${{ secrets.PL_SERVER_URL }}
                  PL_BUILD_ENV: ${{ secrets.PL_BUILD_ENV }}
              run: npm run web-extension:build
            - name: Sign for Firefox
              run: cd packages/extension/dist && web-ext sign --id="${{ secrets.PL_WEB_EXTENSION_FIREFOX_ID }}" --channel=unlisted --api-key=${{ secrets.PL_WEB_EXTENSION_FIREFOX_API_KEY }} --api-secret=${{ secrets.PL_WEB_EXTENSION_FIREFOX_API_SECRET }}
            - name: Upload Signed Web Extension (Firefox)
              uses: svenstaro/upload-release-action@2.2.1
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ env.RELEASE_VERSION }}"
                  file: packages/extension/dist/web-ext-artifacts/padloc-${{ env.RELEASE_VERSION }}.${{ env.RELEASE_BUILD }}-an+fx.xpi
                  asset_name: padloc-web-extension-${{ env.RELEASE_VERSION }}.${{ env.RELEASE_BUILD }}.xpi
            - name: Pack for Chrome Extension
              uses: cardinalby/webext-buildtools-pack-extension-dir-action@v1
              with:
                  extensionDir: packages/extension/dist
                  zipFilePath: packages/extension/padloc.zip
                  zipIgnore: web-ext-artifacts/**|*.xpi
            - name: Upload Unsigned Web Extension (Chrome)
              uses: svenstaro/upload-release-action@2.2.1
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ env.RELEASE_VERSION }}"
                  file: packages/extension/padloc.zip
                  asset_name: padloc-web-extension-${{ env.RELEASE_VERSION }}.${{ env.RELEASE_BUILD }}-unsigned.zip
            - name: Sign for Chrome
              uses: cardinalby/webext-buildtools-chrome-crx-action@v2
              with:
                  zipFilePath: packages/extension/padloc.zip
                  crxFilePath: packages/extension/padloc-signed.crx
                  privateKey: ${{ secrets.PL_WEB_EXTENSION_CHROME_CRX_PRIVATE_KEY }}
            - name: Upload Signed Web Extension (Chrome)
              uses: svenstaro/upload-release-action@2.2.1
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ env.RELEASE_VERSION }}"
                  file: packages/extension/padloc-signed.crx
                  asset_name: padloc-web-extension-${{ env.RELEASE_VERSION }}.${{ env.RELEASE_BUILD }}.crx

    release_tauri:
        name: "Release Tauri apps"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        needs: [update_version, create_release_tag]
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            RELEASE_ID: ${{ needs.create_release_tag.outputs.release_id }}
            LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: "${{ env.LATEST_SHA }}"
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Install Rust stable
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
            - name: Install tauri bundler
              run: cargo install tauri-bundler --force
            - name: Install webkit2gtk (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y webkit2gtk-4.0
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - uses: tauri-apps/tauri-action@v0.2.0
              env:
                  PL_SERVER_URL: ${{ secrets.PL_SERVER_URL }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  releaseId: ${{ env.RELEASE_ID }}
                  projectPath: packages/tauri

    release_electron:
        name: "Release Electron apps"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        needs: [update_version, create_release_tag]
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            RELEASE_ID: ${{ needs.create_release_tag.outputs.release_id }}
            LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: "${{ env.LATEST_SHA }}"
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Build
              run: |
                  npm run electron:build
              env:
                  PL_PWA_URL: ${{ secrets.PL_PWA_URL }}
                  CSC_LINK: ${{ secrets.PL_MACOS_SIGNING_CERT_BASE64 }}
                  CSC_KEY_PASSWORD: ${{ secrets.PL_MACOS_SIGNING_CERT_PASSWORD }}
                  PL_MACOS_NOTARIZE_APPLE_ID: ${{ secrets.PL_MACOS_NOTARIZE_APPLE_ID }}
            # TODO: Supposedly, npm run electron:build already publishes and uploads to the release automatically, so only do the below (and for the missing targets) if necessary
            # - name: Upload AppImage
            #   uses: svenstaro/upload-release-action@2.2.1
            #   if: matrix.platform == 'ubuntu-latest'
            #   with:
            #       repo_token: ${{ secrets.GITHUB_TOKEN }}
            #       tag: "v${{ env.RELEASE_VERSION }}"
            #       file: packages/electron/dist/Padloc-${{ env.RELEASE_VERSION }}.AppImage

    release_cordova:
        name: "Release Cordova apps"
        environment: ${{ github.event.inputs.environment || 'Beta' }}
        needs: [update_version, create_release_tag]
        env:
            RELEASE_VERSION: ${{ github.event.inputs.version || '0.0.1' }}
            RELEASE_BUILD: ${{ github.event.inputs.build || '0' }}
            RELEASE_ID: ${{ needs.create_release_tag.outputs.release_id }}
            LATEST_SHA: ${{ needs.update_version.outputs.new_commit_sha }}
            PL_VENDOR_VERSION: ${{ github.event.inputs.vendor_version || '0.0.1' }}

        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: "${{ env.LATEST_SHA }}"
            - uses: actions/setup-java@v1
              if: matrix.platform == 'ubuntu-latest'
              with:
                  java-version: 1.8
            - uses: sdkman/sdkman-action@master
              if: matrix.platform == 'ubuntu-latest'
              with:
                  candidate: gradle
                  version: 7.2
            - uses: android-actions/setup-android@v2
              if: matrix.platform == 'ubuntu-latest'
            - uses: actions/setup-node@v2
              with:
                  node-version-file: ".nvmrc"
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Create android-upload-key.keystore
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  cd packages/cordova
                  echo '${{ secrets.PL_ANDROID_UPLOAD_KEY_BASE64}}' > android-upload-key.keystore.txt
                  base64 -d android-upload-key.keystore.txt > android-upload-key.keystore
                  rm -f android-upload-key.keystore.txt
            - name: Build Android
              if: matrix.platform == 'ubuntu-latest'
              env:
                  PL_SERVER_URL: ${{ secrets.PL_SERVER_URL }}
                  PL_ANDROID_STORE_PASSWORD: ${{ secrets.PL_ANDROID_STORE_PASSWORD }}
                  PL_ANDROID_KEYSTORE_ALIAS: ${{ secrets.PL_ANDROID_KEYSTORE_ALIAS }}
              run: npm run cordova:build:android:signed
            - name: Build iOS
              if: matrix.platform == 'macos-latest'
              env:
                  PL_SERVER_URL: ${{ secrets.PL_SERVER_URL }}
                  PL_IOS_CODE_SIGN_IDENTITY: ${{ secrets.PL_IOS_CODE_SIGN_IDENTITY }}
                  PL_IOS_DEVELOPMENT_TEAM: ${{ secrets.PL_IOS_DEVELOPMENT_TEAM }}
              run: npm run cordova:build:ios:signed
            - name: Upload Signed APK
              if: matrix.platform == 'ubuntu-latest'
              uses: svenstaro/upload-release-action@2.2.1
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ env.RELEASE_VERSION }}"
                  file: packages/cordova/platforms/android/app/build/outputs/apk/release/app-release.apk
                  asset_name: padloc-${{ env.RELEASE_VERSION }}.apk
            - name: Upload Signed Archive
              if: matrix.platform == 'macos-latest'
              uses: svenstaro/upload-release-action@2.2.1
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ env.RELEASE_VERSION }}"
                  file: packages/cordova/platforms/ios/app/build/device/Padloc.xcarchive
                  asset_name: padloc-${{ env.RELEASE_VERSION }}.xcarchive
            - name: Delete android-upload-key.keystore
              if: matrix.platform == 'ubuntu-latest' && always()
              run: rm -f ./packages/cordova/android-upload-key.keystore
